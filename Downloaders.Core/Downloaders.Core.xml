<?xml version="1.0"?>
<doc>
    <assembly>
        <name>Downloaders.Core</name>
    </assembly>
    <members>
        <member name="T:Downloaders.Core.BaseResourceUriProvider">
            <summary>
            Comic implementation of <see cref="T:Downloaders.Core.IResourceUriProvider"/>.
            Contains helper methods that help subclasses implement the methos of <see cref="T:Downloaders.Core.IResourceUriProvider"/>.
            </summary>
        </member>
        <member name="M:Downloaders.Core.BaseResourceUriProvider.SanitizeFileName(System.Object)">
            <summary>
            Removes all invalid characters from the provided filename.
            If a null filename is provided, and empty string is returned.
            </summary>
            <param name="fileName">The filename that will be sanitized.</param>
            <returns>The filename with all the invalid characters removed</returns>
        </member>
        <member name="T:Downloaders.Core.DownloadableFile">
            <summary>
            Represents a file that can be downloaded from the web, and contains all the necessary information to do so.
            </summary>
        </member>
        <member name="P:Downloaders.Core.DownloadableFile.FileName">
            <summary>
            The that will be given to the file once it's downloaded.
            If it's null, the filename from the uri will be used instead.
            </summary>
        </member>
        <member name="P:Downloaders.Core.DownloadableFile.OutputPath">
            <summary>
            The path where the file will be downloaded.
            It it's null, the user provided output path will be used.
            </summary>
        </member>
        <member name="P:Downloaders.Core.DownloadableFile.Uri">
            <summary>
            The uri of the resource that will be downloaded.
            This can't be null.
            </summary>
        </member>
        <member name="T:Downloaders.Core.Downloader">
            <summary>
            Basic Implementation of a <see cref="T:Downloaders.Core.IDownloader"/>.
            </summary>
        </member>
        <member name="M:Downloaders.Core.Downloader.#ctor(System.Net.Http.HttpClient,System.Int32)">
            <summary>
            Creates an instance of <see cref="T:Downloaders.Core.Downloader"/> with the default downlaoders.
            The default downloaders are:
            <see cref="T:Downloaders.Core.UriProviders.ComicsUriProviders.VCPUriProvider"/>,
            <see cref="T:Downloaders.Core.UriProviders.ComicsUriProviders.EHentaiOrgUriProvider"/>
            and <see cref="T:Downloaders.Core.UriProviders.ComicsUriProviders.VMPUriProvider"/>.
            </summary>
            <param name="httpClient">The HTTP client to reuse.</param>
            <param name="maxItems">The maximum number of items that will be downloaded simultaneously.</param>
        </member>
        <member name="M:Downloaders.Core.Downloader.#ctor(System.Net.Http.HttpClient,System.Collections.Generic.IDictionary{System.String,Downloaders.Core.IResourceUriProvider},System.Int32)">
            <summary>
            Creates an instance of a <see cref="T:Downloaders.Core.Downloader"/> with custom providers,
            the string is the host name and the value is the instance to reuse.
            An example of a host name would be "e-hentai.org".
            </summary>
            <param name="httpClient">The HTTP client to reuse.</param>
            <param name="registeredProviders">The custom providers to use.</param>
            <param name="maxItems">The maximum number of items that will be downloaded simultaneously.</param>
        </member>
        <member name="E:Downloaders.Core.Downloader.DownloadReport">
            <summary>
            Event that fires every time an image is downloaded. Contains information about the current downloads.
            </summary>
        </member>
        <member name="M:Downloaders.Core.Downloader.DownloadComics(System.Collections.Generic.IEnumerable{System.Uri},System.String)">
            <summary>
            Downloads a bunch of comics from the urls,
            this method is provided for allowing the download of multiple comics at a time.
            </summary>
            <param name="urls">The uris where the comic images are located.</param>
            <param name="outputPath">The path where to download the comics.</param>
            <returns>An array of errors. If there were no errors it's an empty array.</returns>
        </member>
        <member name="P:Downloaders.Core.DownloadReportEventArgs.CurrentCount">
            <summary>
            The current count of images downloaded
            </summary>
        </member>
        <member name="P:Downloaders.Core.DownloadReportEventArgs.TotalCount">
            <summary>
            The total count of images that will be downloaded.
            </summary>
        </member>
        <member name="M:Downloaders.Core.ExtensionMethods.ForEachParallelAsync``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task},System.Int32,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Iterates over each element in the <paramref name="source"/>.
            Where each execution may run in parallel and in an async manner.
            </summary>
            <typeparam name="T">The type of the argument that will be passed to each execution.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IEnumerable`1"/> to loop through</param>
            <param name="body">The action that will be executed for each item in the <paramref name="source"/>.</param>
            <param name="maxDegreeOfParallelism">The maximum of executions that will be done concurrently.</param>
            <param name="scheduler">A custom task scheduler, if this is null the default will be used.</param>
            <returns>A task that completes once all executions have finished for each element.</returns>
        </member>
        <member name="M:Downloaders.Core.ExtensionMethods.ForEachParallelAsync``1(System.Collections.Generic.IAsyncEnumerable{``0},System.Func{``0,System.Threading.Tasks.Task},System.Int32,System.Threading.Tasks.TaskScheduler)">
            <summary>
            Iterates over each element in the <paramref name="source"/>.
            Where each execution may run in parallel and in an async manner.
            </summary>
            <typeparam name="T">The type of the argument that will be passed to each execution.</typeparam>
            <param name="source">The <see cref="T:System.Collections.Generic.IAsyncEnumerable`1"/> to loop through</param>
            <param name="body">The action that will be executed for each item in the <paramref name="source"/>.</param>
            <param name="maxDegreeOfParallelism">The maximum of executions that will be done concurrently.</param>
            <param name="scheduler">A custom task scheduler, if this is null the default will be used.</param>
            <returns>A task that completes once all executions have finished for each element.</returns>
        </member>
        <member name="T:Downloaders.Core.IDownloader">
            <summary>
            Represents a Comic Downloader.
            Encapsulates all the logic to download comics from multiple urls and saves the images to the specified path.
            </summary>
        </member>
        <member name="E:Downloaders.Core.IDownloader.DownloadReport">
            <summary>
            Event that contains download information of the current process.
            </summary>
        </member>
        <member name="M:Downloaders.Core.IDownloader.DownloadComics(System.Collections.Generic.IEnumerable{System.Uri},System.String)">
            <summary>
            Downloads all the comics from the specified <paramref name="urls"/> if it recognizes them.
            </summary>
            <param name="urls">The array of urls of the comics.</param>
            <param name="outputPath">The path where the comics folders will be created.</param>
            <returns>An array filled with all the errors. If there weren't any it's an empty array.</returns>
        </member>
        <member name="T:Downloaders.Core.IResourceUriProvider">
            <summary>
            Encapsulates all the methods required to download a resource from one online host.
            </summary>
        </member>
        <member name="M:Downloaders.Core.IResourceUriProvider.GetNumberOfItems(System.Uri)">
            <summary>
            Get's how many items will be downloaded.
            The implementation needs to be thread safe.
            </summary>
            <param name="uri">The uri where the resource lives.</param>
            <returns>A task that'll return the number of items that will be downloaded.</returns>
        </member>
        <member name="M:Downloaders.Core.IResourceUriProvider.GetUris(System.Uri,System.String)">
            <summary>
            Get's all the files that will be downloaded.
            The implementation needs to be thread safe.
            </summary>
            <param name="uri">The uri where the resource lives.</param>
            <param name="mainPath">The main output path, may be used to construct other paths were the <see cref="T:Downloaders.Core.DownloadableFile"/> will be downloaded.</param>
            <returns>An async enumerator that'll return all the uris.</returns>
        </member>
        <member name="T:Downloaders.Core.UriProviders.ComicsUriProviders.BaseComicUriProvider">
            <summary>
            Represents the base class for all comic uri providers.
            Contains some handy methods that help in the construction of <see cref="T:Downloaders.Core.DownloadableFile"/>'s for comics.
            </summary>
        </member>
        <member name="M:Downloaders.Core.UriProviders.ComicsUriProviders.BaseComicUriProvider.ConstructComicPath(System.String,System.String)">
            <summary>
            Constructs and sanitizes a comic path.
            </summary>
            <param name="basePath">The path where the comic should be downloaded.</param>
            <param name="comicTitle">The title of the comic.</param>
            <returns>The sanitized comic path.</returns>
        </member>
        <member name="T:Downloaders.Core.UriProviders.ComicsUriProviders.EHentaiOrgUriProvider">
            <summary>
            <see cref="T:Downloaders.Core.IResourceUriProvider"/> implementation for the <see href="e-hentai.org"/> host.
            </summary>
        </member>
        <member name="T:Downloaders.Core.UriProviders.ComicsUriProviders.VCPUriProvider">
            <summary>
            <see cref="T:Downloaders.Core.IResourceUriProvider"/> implementation for the <see href="vercomicsporno.com"/> host.
            </summary>
        </member>
        <member name="T:Downloaders.Core.UriProviders.ComicsUriProviders.VMPUriProvider">
            <summary>
            <see cref="T:Downloaders.Core.IResourceUriProvider"/> implementation for the <see href="vermangasporno.com"/> host.
            </summary>
        </member>
    </members>
</doc>
